generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id
  email             String
  firstName         String
  bio               String?
  lastName          String
  imageUrl          String?
  userName          String?     @unique
  createdSubreddits subtitoao[]

  createdAt DateTime  @default(now())
  Vote      Vote[]
  Comment   Comemnt[]

  posts     Post[]
  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model subtitoao {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  posts Post[]
}

model Post {
  id          String    @id @default(uuid())
  title       String
  textContent Json?
  imageString String?
  videoString String?
  Vote        Vote[]
  Comment     Comemnt[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Subreddit subtitoao? @relation(fields: [subName], references: [name])
  subName   String?
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?
}

enum TypeOfVote {
  UP
  DOWN
}

model Vote {
  id String @id @default(uuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  voteType TypeOfVote
}

model Comemnt {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}
